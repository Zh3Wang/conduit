syntax = "proto3";

package interface.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "api/interface/v1/interface_data.proto";

option go_package = "./interfacePb";

// The greeting service definition.
service ConduitInterface {
  rpc Register (RegisterRequest) returns (UserReply) {
    option (google.api.http) = {
      post: "api/users",
      body: "*",
    };
  };
  rpc Login (LoginRequest) returns (UserReply) {
    option (google.api.http) = {
      post:"api/users/login",
      body: "*",
    };
  }
  rpc GetCurrentUser (GetCurrentUserRequest) returns (UserReply) {
    option (google.api.http) = {
      get:"api/user",
    };
  }

  rpc UpdateUser (UpdateUserRequest) returns (UserReply) {
    option (google.api.http) = {
      put: "api/user",
      body: "*",
    };
  }

  rpc GetProfile (GetProfileRequest) returns (ProfileReply) {
    option (google.api.http) = {
      get: "api/profiles/{username}"
    };
  }

  rpc FollowUser(FollowUserRequest) returns (ProfileReply) {
    option (google.api.http) = {
      post:"api/profiles/{username}/follow",
      body: "*",
    };
  }

  rpc UnfollowUser(UnfollowUserRequest) returns (ProfileReply) {
    option (google.api.http) = {
      delete:"api/profiles/{username}/follow",
    };
  }

  rpc ListArticles(ListArticlesRequest) returns (MultipleArticles) {
    option (google.api.http) = {
      get: "api/articles"
    };
  }

  rpc GetArticle (GetArticleRequest) returns (GetArticleReply)  {
    option (google.api.http) = {
      get : "/api/articles/{slug}",
    };
  }

  rpc FeedArticles(FeedArticlesRequest) returns (MultipleArticles) {
    option (google.api.http) = {
      get : "/api/articles/feed",
    };
  }

  rpc CreateArticle(CreateArticleRequest) returns (GetArticleReply) {
    option (google.api.http) = {
      post:"api/articles",
      body: "*",
    };
  }

  rpc UpdateArticle(UpdateArticleRequest) returns (GetArticleReply) {
    option (google.api.http) = {
      put:"api/articles/{slug}",
      body: "*",
    };
  }

  rpc DeleteArticle(DeleteArticleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "api/articles/{slug}"
    };
  }

  rpc AddComment(AddCommentRequest) returns (SingleCommentReply) {
    option (google.api.http) = {
      post : "api/articles/{slug}/comments",
      body : "*",
    };
  }

  rpc GetComments(GetCommentsRequest) returns (MultipleCommentsReply) {
    option (google.api.http) = {
      get : "api/articles/{slug}/comments",
    };
  }

  rpc DeleteComment(DeleteCommentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "api/articles/{slug}/comments/{id}",
    };
  }

  rpc FavoriteArticle(FavoriteArticleRequest) returns (GetArticleReply) {
    option (google.api.http) = {
      post : "api/articles/{slug}/favorite",
    };
  }

  rpc UnfavoriteArticle(UnfavoriteArticleRequest) returns (GetArticleReply) {
    option (google.api.http) = {
      delete : "api/articles/{slug}/favorite",
    };
  }

  rpc GetTags(google.protobuf.Empty) returns (GetTagsReply) {
    option (google.api.http) = {
      get: "api/tags",
    };
  }
}

message GetArticleRequest {
  string slug = 1 [(validate.rules).string.min_len = 1, json_name = "slug"];
}

// The response message containing the greetings
message GetArticleReply {
  SingleArticle article = 3;
}

message RegisterUserModel {
  string username = 1 [(validate.rules).string.min_len = 3, json_name = "username"];
  string email = 2 [(validate.rules).string.email = true];
  string password = 3 [(validate.rules).string.min_len = 6];
}

message RegisterRequest {
  RegisterUserModel user = 1;
}

message UserReply {
  User user = 1;
}

message LoginRequest {
  message param {
    string email = 1 [(validate.rules).string.email = true, json_name = "email"];
    string password = 2 [(validate.rules).string.min_len = 6];
  }
  param user = 1;
}

message GetCurrentUserRequest {}


message UpdateUserRequest {
  message User {
    string email = 1 [(validate.rules).string = {ignore_empty: true, email: true}];
    string password = 2 [(validate.rules).string = {ignore_empty: true, min_len: 6}];
    string username = 3 [(validate.rules).string = {ignore_empty: true, min_len: 3}];
    string bio = 4;
    string image = 5;
  }
  User user = 1;
}

message GetProfileRequest {
  string username = 1 [(validate.rules).string = {min_len: 3}];
}

message ProfileReply {
  Profile profile = 1;
}

message FollowUserRequest {
  string username = 1 [(validate.rules).string = {min_len: 3}];
}

message UnfollowUserRequest {
  string username = 1 [(validate.rules).string = {min_len: 3}];
}

message ListArticlesRequest {
  string tag = 1;
  string author = 2;
  string favorited = 3;
  int64 limit = 4;
  int64 offset = 5;
}

message FeedArticlesRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message CreateArticleRequest {
  message data {
    string title = 1[(validate.rules).string = {min_len: 1}];
    string description = 2[(validate.rules).string = {min_len: 1}];
    string body = 3[(validate.rules).string = {min_len: 1}];
    repeated string tagList = 4;
  }
  data article = 1;
}

message UpdateArticleRequest {
  message data {
    string title = 1[(validate.rules).string = {min_len: 1}];
  }
  data article = 1;
  string slug = 2;
}

message DeleteArticleRequest {
  string slug = 1[(validate.rules).string = {min_len: 1}];
}

message GetTagsReply {
  repeated string tags = 1;
}

message DeleteCommentRequest {
  string slug = 1;
  int64 id = 2;
}

message AddCommentRequest {
  message Comment {string body = 1;}

  Comment comment = 1;
  string slug = 2;
}

message GetCommentsRequest {
  string slug = 1;
}

message FavoriteArticleRequest {string slug = 1;}

message UnfavoriteArticleRequest {string slug = 1;}

message SingleCommentReply {Comment comment = 1;}

message MultipleCommentsReply {repeated Comment comments = 1;}